def detail_category_to_type(input_string) -> str:
    # Define the mapping of strings to numbers
    mapping = {
        "Favorite Cuisine": "MP",
        "favourite_cuisine": "MP",
        "Preferred Restaurant Type": "MP",
        "preferred_restaurant_type": "MP",
        "Fast Food Preference": "MP",
        "fast_food_preference": "MP",
        "Desired Price Range": "MNP",
        "desired_price_range": "MNP",
        "Dietary Preferences": "MP",
        "dietary_preference": "MP",
        "Preferred Payment method": "MNP",
        "preferred_payment_method": "MNP",
        "Preferred Gas Station": "MP",
        "preferred_gas_station": "MP",
        "Willingness to Pay Extra for Green Fuel": "MNP",
        "willingness_to_pay_extra_for_green_fuel": "MNP",
        "Price Sensitivity for Fuel": "MNP",
        "price_sensitivity_for_fuel": "MNP",
        "Preferred Charging Network": "MP",
        "preferred_charging_network": "MP",
        "Preferred type of Charging while traveling": "MNP",
        "preferred_type_of_charging_while_traveling": "MNP",
        "Preferred type of Charging when being at everyday points (f.e. work, grocery, restaurant)": "MNP",
        "preferred_type_of_charging_at_everyday_points": "MNP",
        "Charging Station Amenities": "MP",
        "charging_station_onsite_amenities": "MP",
        "Preferred Supermarket Chains": "MP",
        "preferred_supermarket_chain": "MP",
        "Preference for Local Markets/Farms or Supermarket": "MNP",
        "preference_for_local_markets_farms_or_supermarket": "MNP",
        "Avoidance of Specific Road Types": "MP",
        "avoidance_of_specific_road_types": "MP",
        "Priority for Shortest Time or Shortest Distance": "MNP",
        "priority_for_shortest_time_or_shortest_distance": "MNP",
        "Tolerance for Traffic": "MNP",
        "tolerance_for_traffic": "MNP",
        "traffic_information_source_preferences": "MNP",
        "Traffic Information Source Preferences": "MNP",
        "Willingness to Take Longer Route to Avoid Traffic": "MNP",
        "willingness_to_take_longer_route_to_avoid_traffic": "MNP",
        "Preferred Parking Type": "MNP",
        "preferred_parking_type": "MNP",
        "Price Sensitivity for Paid Parking": "MNP",
        "price_sensitivity_for_paid_parking": "MNP",
        "Distance Willing to Walk from Parking to Destination": "MNP",
        "distance_willing_to_walk_from_parking_to_destination": "MNP",
        "Preference for Covered Parking": "MNP",
        "preference_for_covered_parking": "MNP",
        "Need for Handicapped Accessible Parking": "MNP",
        "need_for_handicapped_accessible_parking": "MNP",
        "Preference for Parking with Security": "MNP",
        "preference_for_parking_with_security": "MNP",
        "Preferred Temperature": "MNP",
        "preferred_temperature": "MNP",
        "Fan Speed Preferences": "MNP",
        "fan_speed_preferences": "MNP",
        "Airflow Direction Preferences": "MNP",
        "airflow_direction_preferences": "MNP",
        "Seat Heating Preferences": "MNP",
        "seat_heating_preferences": "MNP",
        "Interior Lighting Brightness Preferences": "MNP",
        "interior_lighting_brightness_preferences": "MNP",
        "Interior Lighting Ambient Preferences": "MNP",
        "interior_lighting_ambient_preferences": "MNP",
        "Interior Lightning Color Preferences": "MP",
        "interior_lighting_color_preferences": "MP",
        "Favorite Genres": "MP",
        "favorite_genres": "MP",
        "Favorite Artists/Bands": "MP",
        "favorite_artists_or_bands": "MP",
        "Favorite Songs": "MP",
        "favorite_songs": "MP",
        "Preferred Music Streaming Service": "MNP",
        "preferred_music_streaming_service": "MNP",
        "Preferred Radio Station": "MNP",
        "preferred_radio_station": "MNP",
        "Favorite Podcast Genres": "MP",
        "favorite_podcast_genres": "MP",
        "Favorite Podcast Shows": "MP",
        "favorite_podcast_shows": "MP",
        "General News Source": "MNP",
        "general_news_source": "MNP",
    }

    # Check if the input string is in the mapping
    if input_string in mapping:
        return str(mapping[input_string])
    else:
        # Raise an exception if the string is not found
        raise ValueError(f"No mapping found for string: {input_string}")
